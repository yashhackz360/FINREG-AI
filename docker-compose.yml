

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  regulatory-monitor:
    build: .
    container_name: regulatory-monitor
    command: python scripts/01_ingest_data.py
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./artifacts:/app/artifacts
    env_file:
      - ./.env
    environment:
      - PYTHONPATH=/app

  realtime-processor:
    build: .
    container_name: realtime-processor
    command: python scripts/02_realtime_ingestion.py
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./artifacts:/app/artifacts
    env_file:
      - ./.env
    environment:
      - PYTHONPATH=/app

  # --- NEW SERVICE FOR SUMMARIZATION ---
  summarizer-service:
    build: .
    container_name: summarizer-service
    command: python scripts/03_summarizer.py
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./artifacts:/app/artifacts
    env_file:
      - ./.env
    environment:
      - PYTHONPATH=/app

  streamlit-app:
    build: .
    container_name: streamlit-app
    command: streamlit run app/streamlit_ui.py --server.port 8501 --server.address 0.0.0.0
    ports:
      - "8501:8501"
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./app:/app/app
      - ./artifacts:/app/artifacts

  akhq:
    image: tchiotludo/akhq
    container_name: akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka:
              properties:
                bootstrap.servers: "kafka:29092"
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_healthy

